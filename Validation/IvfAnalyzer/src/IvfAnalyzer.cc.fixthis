// -*- C++ -*-
//
// Package:    IvfAnalyzer
// Class:      IvfAnalyzer
// 
/**\class IvfAnalyzer IvfAnalyzer.cc Validation/IvfAnalyzer/src/IvfAnalyzer.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Dominik Nowatschin,68/102,2978,
//         Created:  Mon Jan 13 14:35:23 CET 2014
// $Id$
//
//


// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "TH2.h"

#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "DataFormats/VertexReco/interface/Vertex.h"

#include <math.h>


//
// class declaration
//

class IvfAnalyzer : public edm::EDAnalyzer {
   public:
      explicit IvfAnalyzer(const edm::ParameterSet&);
      ~IvfAnalyzer();

// //       static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
//       virtual void beginJob() ;
      virtual void endJob() ;

//       virtual void beginRun(edm::Run const&, edm::EventSetup const&);
//       virtual void endRun(edm::Run const&, edm::EventSetup const&);
//       virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);
//       virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);



      virtual void analyze(const edm::Event&, const edm::EventSetup&);
      
      TH2D *SVhistoRhoZ, *SVhistoXY, *SVhistoParRhoZ, *SVhistoParXY, *SVhistoRhoPhi, *SVhistoParRhoPhi;
      TH1D *SVhistoRho, *SVhistoParRho;
      
      edm::ParameterSet parSet_;
//       sec_vert_B_, sec_vert_NonB_;
      
      unsigned int maxCount_;


      // ----------member data ---------------------------
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
IvfAnalyzer::IvfAnalyzer(const edm::ParameterSet& pSet) :
	maxCount_(pSet.getParameter<unsigned int>("maxCount")),
	parSet_(pSet.getParameter<edm::ParameterSet>("plotConfig"))	
// 	sec_vert_B_(pSet.getParameter<edm::InputTag>("secVertB")),
// 	sec_vert_NonB_(pSet.getParameter<edm::InputTag>("secVertNonB"))
{
   edm::Service<TFileService> fs;
   SVhistoRhoZ = fs->make<TH2D>("secVerticesRhoZ", "Secondary Vertices Z-Rho", 560, -70, 70, 300, 0, 30);
   SVhistoXY = fs->make<TH2D>("secVerticesXY", "Secondary Vertices X-Y",  600, -30, 30, 600, -30, 30);
   SVhistoRhoPhi = fs->make<TH2D>("secVerticesRhoPhi", "Secondary Vertices Phi-Rho",  300, -3.15, 3.15, 300, 0, 30);
   SVhistoParRhoZ = fs->make<TH2D>("secVerticesParRhoZ", "(Parametrized) Secondary Vertices Z-Rho", 560, -70, 70, 300, 0, 30);
   SVhistoParXY = fs->make<TH2D>("secVerticesParXY", "(Parametrized) Secondary Vertices X-Y",  600, -30, 30, 600, -30, 30);
   SVhistoParRhoPhi = fs->make<TH2D>("secVerticesParRhoPhi", "(Parametrized) Secondary Vertices Phi-Rho",  300, -3.15, 3.15, 300, 0, 30);
   SVhistoRho = fs->make<TH1D>("secVerticesRho", "Secondary Vertices Rho Projection", 300, 0, 30);
   SVhistoParRho = fs->make<TH1D>("secVerticesParRho", "(Parametrized) Secondary Vertices Rho Projection", 300, 0, 30);

}


IvfAnalyzer::~IvfAnalyzer()
{
}


//
// member functions
//

// ------------ method called for each event  ------------
void
IvfAnalyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
   
   unsigned int counter = 0;
   
   edm::InputTag sec_vert_B_ = parSet_.getParameter<edm::InputTag>("secVertB");
   Handle< edm::View<reco::Vertex> > sec_vert_B;
   iEvent.getByLabel(sec_vert_B_, sec_vert_B);
   
   for (edm::View<reco::Vertex>::const_iterator ivertex = sec_vert_B->begin(); ivertex != sec_vert_B->end() && counter < maxCount_; ++ivertex) {
     counter++;
     double secvert_rho = ivertex->position().rho();
     double secvert_phi = ivertex->position().phi();
     double secvert_z = ivertex->position().z();
     double secvert_y = ivertex->position().y();
     double secvert_x = ivertex->position().x();
     
     //=======AXIS PARAMETRIZATION==================
     
     double secvert_x_par = ivertex->position().x()-(0.086-0.0007*secvert_z);
     double secvert_y_par = ivertex->position().y()-(-0.197+0.0007*secvert_z);
     double secvert_rho_par = sqrt(secvert_x_par*secvert_x_par+secvert_y_par*secvert_y_par);
     double secvert_phi_par = acos(secvert_x_par/secvert_rho_par);
     
     SVhistoRhoZ->Fill(secvert_z, secvert_rho);
     SVhistoXY->Fill(secvert_x, secvert_y);
     SVhistoRhoPhi->Fill(secvert_phi, secvert_rho);
     SVhistoParRhoZ->Fill(secvert_z, secvert_rho_par);
     SVhistoParXY->Fill(secvert_x_par, secvert_y_par);
     SVhistoParRhoPhi->Fill(secvert_phi_par, secvert_rho_par);
     SVhistoRho->Fill(secvert_rho);
     SVhistoParRho->Fill(secvert_rho_par);
   }
   
   if (parSet_.exists("secVertNonB")) {   
     edm::InputTag sec_vert_NonB_ = parSet_.getParameter<edm::InputTag>("secVertNonB");
     Handle< edm::View<reco::Vertex> > sec_vert_NonB;
     iEvent.getByLabel(sec_vert_NonB_, sec_vert_NonB);

     for (edm::View<reco::Vertex>::const_iterator ivertex = sec_vert_NonB->begin(); ivertex != sec_vert_NonB->end() && counter < maxCount_; ++ivertex) {
       counter++;
       double secvert_rho = ivertex->position().rho();
       double secvert_phi = ivertex->position().phi();
       double secvert_z = ivertex->position().z();
       double secvert_y = ivertex->position().y();
       double secvert_x = ivertex->position().x();
       
       //=======AXIS PARAMETRIZATION==================
       
       double secvert_x_par = ivertex->position().x()-(0.086-0.0007*secvert_z);
       double secvert_y_par = ivertex->position().y()-(-0.197+0.0007*secvert_z);
       double secvert_rho_par = sqrt(secvert_x_par*secvert_x_par+secvert_y_par*secvert_y_par);
       double secvert_phi_par = acos(secvert_x_par/secvert_rho_par);
       
       SVhistoRhoZ->Fill(secvert_z, secvert_rho);
       SVhistoXY->Fill(secvert_x, secvert_y);
       SVhistoRhoPhi->Fill(secvert_phi, secvert_rho);
       SVhistoParRhoZ->Fill(secvert_z, secvert_rho_par);
       SVhistoParXY->Fill(secvert_x_par, secvert_y_par);
       SVhistoParRhoPhi->Fill(secvert_phi_par, secvert_rho_par);
       SVhistoRho->Fill(secvert_rho);
       SVhistoParRho->Fill(secvert_rho_par);
     }
   }
   
} 


// // ------------ method called once each job just before starting event loop  ------------
// void 
// IvfAnalyzer::beginJob()
// {
// }
// 
// // ------------ method called once each job just after ending the event loop  ------------
void 
IvfAnalyzer::endJob() 
{
  
}
// 
// // ------------ method called when starting to processes a run  ------------
// void 
// IvfAnalyzer::beginRun(edm::Run const&, edm::EventSetup const&)
// {
// }
// 
// // ------------ method called when ending the processing of a run  ------------
// void 
// IvfAnalyzer::endRun(edm::Run const&, edm::EventSetup const&)
// {
// }
// 
// // ------------ method called when starting to processes a luminosity block  ------------
// void 
// IvfAnalyzer::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
// {
// }
// 
// // ------------ method called when ending the processing of a luminosity block  ------------
// void 
// IvfAnalyzer::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
// {
// }
// 
// // ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
// void
// IvfAnalyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
//   //The following says we do not know what parameters are allowed so do no validation
//   // Please change this to state exactly what you do use, even if it is no parameters
//   edm::ParameterSetDescription desc;
//   desc.setUnknown();
//   descriptions.addDefault(desc);
// }

//define this as a plug-in
DEFINE_FWK_MODULE(IvfAnalyzer);
